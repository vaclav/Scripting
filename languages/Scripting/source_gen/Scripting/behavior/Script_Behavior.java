package Scripting.behavior;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Script_Behavior {
  private static Logger LOG = Logger.getLogger(Script_Behavior.class);

  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> call_retrieveStaticMethodDeclarations_6240804956234706787(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "Scripting.structure.StaticMethodDeclarationInScript");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "Scripting.structure.StaticMethodDeclarationInScript"), "declaration", true);
      }
    });
  }

  public static Iterable<SNode> call_retrieveInstanceMethodDeclarations_6240804956234799549(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "Scripting.structure.InstanceMethodDeclarationInScript");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "Scripting.structure.InstanceMethodDeclarationInScript"), "declaration", true);
      }
    });
  }

  public static Iterable<SNode> call_retrieveStaticFieldDeclarations_6240804956234802612(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "Scripting.structure.StaticFieldDeclarationInScript");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "Scripting.structure.StaticFieldDeclarationInScript"), "declaration", true);
      }
    });
  }

  public static Iterable<SNode> call_retrieveFieldDeclarations_6240804956234802648(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "Scripting.structure.FieldDeclarationInScript");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "Scripting.structure.FieldDeclarationInScript"), "declaration", true);
      }
    });
  }

  public static Iterable<SNode> call_retrieveStatements_6240804956234738996(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "Scripting.structure.StaticMethodDeclarationInScript") || SNodeOperations.isInstanceOf(it, "Scripting.structure.InstanceMethodDeclarationInScript") || SNodeOperations.isInstanceOf(it, "Scripting.structure.StaticFieldDeclarationInScript") || SNodeOperations.isInstanceOf(it, "Scripting.structure.FieldDeclarationInScript"));
      }
    });
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      Iterable<SNode> elements = Script_Behavior.call_retrieveStaticMethodDeclarations_6240804956234706787(thisNode);
      if (SNodeOperations.getAncestor(child, "Scripting.structure.StaticFieldDeclarationInScript", false, false) == null && SNodeOperations.getAncestor(child, "Scripting.structure.StaticMethodDeclarationInScript", false, false) == null) {
        elements = Sequence.fromIterable(elements).concat(Sequence.fromIterable(Script_Behavior.call_retrieveInstanceMethodDeclarations_6240804956234799549(thisNode)));
      }
      return Script_Behavior.call_createScope_6240804956234810155(thisNode, elements);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) {
      Iterable<SNode> elements = Script_Behavior.call_retrieveStaticFieldDeclarations_6240804956234802612(thisNode);
      LOG.warning("AAAAAAAAAAAAAAAAAAAAAAAAAAaaa" + child + ":" + SNodeOperations.getAncestor(child, "Scripting.structure.StaticFieldDeclarationInScript", false, false));
      if (SNodeOperations.getAncestor(child, "Scripting.structure.StaticFieldDeclarationInScript", false, false) == null && SNodeOperations.getAncestor(child, "Scripting.structure.StaticMethodDeclarationInScript", false, false) == null) {
        elements = Sequence.fromIterable(elements).concat(Sequence.fromIterable(Script_Behavior.call_retrieveFieldDeclarations_6240804956234802648(thisNode)));
      }
      return Script_Behavior.call_createScope_6240804956234810155(thisNode, elements);
    }
    return null;
  }

  public static Scope call_createScope_6240804956234810155(SNode thisNode, final Iterable<SNode> elements) {
    return new Scope() {
      /**
       * Returns all available elements in the scope.
       * 
       * @param prefix (if not null) filters out elements whose reference text doesn't start with prefix
       * @return list of nodes in the scope
       */
      public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
        return elements;
      }

      /**
       * Resolves element by reference text.
       * 
       * Invariant: getReferenceText(contextNode, resolve(contextNode, refText)) == refText
       * 
       * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
       * @param refText reference text
       * @return resolved element when reference text unambiguously identifies element, null otherwise
       */
      public SNode resolve(SNode contextNode, String refText) {
        SNode result = null;
        for (SNode n : elements) {
          String name = SPropertyOperations.getString(SNodeOperations.cast(n, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
          if (name.equals(refText)) {
            if (result == null) {
              result = n;
            } else {
              return null;
            }
          }
        }
        return result;
      }

      /**
       * Creates textual reference for scope element. If element has no textual representation
       * for the reference, returns null.
       * 
       * Invariant: resolve(contextNode, getReferenceText(contextNode, node)) == node
       * 
       * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
       * @param node element from the current scope (contains(node) == true)
       * @return reference text for the node element in the current scope
       */
      public String getReferenceText(SNode contextNode, SNode node) {
        if (node == null) {
          return null;
        }

        return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    };
  }
}
