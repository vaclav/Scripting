package Scripting.sandbox.sandbox;

/*Generated by MPS */

import java.util.Arrays;

public class MyScript {
  private static int myStaticField = 10;
  private static int anotherStaticField = 10 + foo("Bar") + myStaticField;

  private int myField = 20 + myStaticField;
  private int anotherField = anotherStaticField + myField + calculate(1, 10);

  public MyScript() {
  }

  public Object run() {
    System.out.println("Foo");
    System.out.println("Bar");
    for (int i : Arrays.asList(1, 2, 3, 4, 5)) {
      System.out.println("" + i);

    }
    int localValue = 10 + calculate(30, 10) + myField + myStaticField;
    System.out.println("Baz");

    MyScript.Foo1 foo1 = new MyScript.Foo1();
    foo1.method(10);
    MyScript.Foo1.staticMethod(20);
    MyScript.Bar1 bar1 = new MyScript.Bar1() {
      public void barbar() {
        System.out.println("Bar called");
      }
    };
    bar1.barbar();
    new ExternalClass().calculate(10);
    new MyScript.NonStaticFoo();

    return 100 + foo("foo") + localValue + calculate(10, 20);
  }

  public int calculate(int a, int b) {
    return a + b - anotherStaticField + anotherField;
  }

  public static void main(String[] args) {
    Object result = new MyScript().run();
    if (result != null) {
      System.out.println("Result: " + result);
    }
  }

  public static int foo(String value) {
    return value.length() + myStaticField - anotherStaticField;
  }

  public static class Foo1 {
    public Foo1() {
    }

    public void method(int value) {
      System.out.println("value=" + value);
    }

    public static void staticMethod(int value) {
      System.out.println("value=" + value);
    }
  }

  public static interface Bar1 {
    public void barbar();
  }

  public class NonStaticFoo {
    public NonStaticFoo() {
    }
  }
}
